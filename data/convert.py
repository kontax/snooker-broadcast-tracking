#!/usr/bin/python
# convert.py
# Converts the image metafiles into XML annotation files
# The files are taken from the 'folder' variable, and saved into the 'output' folder.
# Both folders need to be created before running the script.

from random import randint
from os import listdir
from os.path import join, splitext

width = 1280
height = 720
folder = 'labels'
output = 'fixed'
labels = ['white', 'red', 'yellow', 'green', 'brown', 'blue', 'pink', 'black']

# Images where the specified pocket is covered
rm_top_left = ['00012-41', '00052-32', '00108-33', '00144-48', '00217-20',
               '00221-25', '00250-07']
rm_top_right = ['00010-24', '00052-35', '00184-00', '00213-23', '00052-32']
rm_bot_left = ['00026-48', '00048-10', '00050-17', '00066-47', '00095-29',
               '00150-26', '00165-06',
               '00199-03', '00220-35', '00241-00']
rm_bot_right = ['00034-23', '00066-08', '00089-23', '00106-38', '00120-03',
                '00124-14', '00125-19',
                '00149-04', '00169-03', '00178-10', '00210-14', '00211-20',
                '00242-13', '00250-21', '00256-05']


def to_xml(l, x, y, w, h):
    """
    Converts the specified label and dimensions to the XML format required to
    annotate the images for training.
    :param l: The label of the class, eg. Red/Blue/Corner etc.
    :param x: The value of the x coordinate of the top left of the bounding box
    :param y: The value of the y coordinate of the top left of the bounding box
    :param w: The width of the bounding box
    :param h: The height of the bounding box
    :return: An XML annotation of the object being labelled
    """
    s = '\t<object>\n' + \
        '\t\t<name>{}</name>\n'.format(l) + \
        '\t\t<truncated>0</truncated>\n' + \
        '\t\t<difficult>0</difficult>\n' + \
        '\t\t<bndbox>\n' + \
        '\t\t\t<xmin>{}</xmin>\n'.format(x) + \
        '\t\t\t<ymin>{}</ymin>\n'.format(y) + \
        '\t\t\t<xmax>{}</xmax>\n'.format(x + w) + \
        '\t\t\t<ymax>{}</ymax>\n'.format(y + h) + \
        '\t\t</bndbox>\n' + \
        '\t</object>\n'
    return s


def get_xy(label, x, y, x_offset=0, y_offset=0):
    """
    Gets the X and Y values of the line containing the label as defined by the
    snooker table labelling program.
    :param label: The line containing the information about the snooker object
    :param x: The position of the x value within the label
    :param y: The position of the y value within the label
    :param x_offset: The offset in pixels to add to the x value if required
    :param y_offset: The offset in pixels to add to the y value if required
    :return: A tuple containing the x/y coordinates of the label specified
    """
    return (int(label[x].split(':')[1]) + x_offset,
            int(label[y].split(':')[1]) + y_offset)


def label_corners(label, filename):
    """
    Gets the XML value of the corner pockets. All details are within one line in
    the metadata generated by the snooker tagging program.
    :param label: The line containing the information about the corner pockets
    :param filename: The text file containing the labels
    :return: An XML string containing the coordinates of the pockets
    """
    im = splitext(filename)[0][:8]
    xml = ''

    if im not in rm_bot_left:
        p1 = get_xy(label, 2, 3)
        p1 = (p1[0] - 60, p1[1])
        xml = to_xml('pocket', p1[0], p1[1], 60, 30)

    if im not in rm_top_left:
        # p2 = get_xy(label, 4, 5, 10, 10)
        p2 = get_xy(label, 4, 5)
        p2 = (p2[0] - 40, p2[1] - 15)
        xml += to_xml('pocket', p2[0], p2[1], 40, 15)

    if im not in rm_top_right:
        r = randint(-2, 2)  # Random +- for mess up y value
        p3 = get_xy(label, 6, 5)  # messed up this y value
        p3 = (p3[0], p3[1] - 15 + r)
        xml += to_xml('pocket', p3[0], p3[1], 40, 15)

    if im not in rm_bot_right:
        p4 = get_xy(label, 8, 9)
        xml += to_xml('pocket', p4[0], p4[1], 60, 30)

    return xml


def write_xml_to_file():
    """
    Converts the text files generated by the snooker labelling program to XML
    annotations required by the training program.
    """
    files = [f for f in listdir(folder) if f.endswith('.txt')]

    for data in files:
        print 'Updating ' + data

        # Get the path for the old and new files
        newFile = join(output, data)
        oldFile = join(folder, data)

        # Initial XML for annotation
        xml = '<annotation>\n' + \
              '\t<folder>snooker</folder>\n' + \
              '\t<filename>{}</filename>\n'.format(data) + \
              '\t<size>\n' + \
              '\t\t<width>{}</width>\n'.format(width) + \
              '\t\t<height>{}</height>\n'.format(height) + \
              '\t\t<depth>3</depth>\n' + \
              '\t</size>\n'

        # Loop through the lines of the metafile one by one
        with open(oldFile) as f:
            for line in f.readlines():
                s = line.split()

                # Ignore lines without relevant data
                if len(s) < 2:
                    continue

                # Corner pockets are labelled with '#FF00FF00'
                elif s[1] == '#FF00FF00':
                    xml += label_corners(s, data)

                # The rest are snooker balls
                else:
                    label = s[1].split(':')[1]
                    x = int(s[2].split(':')[1])
                    y = int(s[3].split(':')[1])
                    w = int(s[4].split(':')[1])
                    h = int(s[5].split(':')[1])

                    label = labels[int(label)]
                    xml += to_xml(label, x, y, w, h)

        # Close off the XML tag
        xml += '</annotation>\n'

        # And save the file to the new location
        with open(newFile, 'w') as n:
            n.write(xml)


if __name__ == '__main__':
    write_xml_to_file()
