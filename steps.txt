Lit Review
----
- ANN history
- Computer vision
- Object detection
- Multiple object detection
- Counting
- Tracking
- Software

Data Collection
----
- Script youtube download
- Get large and small videos
- Convert videos: for i in *.mp4; do ffmpeg -i $i -vf scale=426:240 fixed/$i; done
    - This scales them all to the largest aspect ratio in the batch
- Install opencv for python
- Extract random images from the short video's using the extract_images.py script
- Create a web-page to allow tagging of images, note the following references:
    - http://tutorialzine.com/2014/01/nodejs-picture-voting-game-part-2/
      This site had the basic picture choosing methodology, and contained most of the
      information necessary to copy over.
    - http://blog.modulus.io/nodejs-and-sqlite
      Had information on using NodeJS with SQLite

Network Training
---
- Train a table recognition network using the CIFAR model from Caffe
    - Took forever to figure this out
    - Just the initial network used to try things out
    - Compared:
        - TensorFlow
        - Theano
        - Caffe
        - CNTK
    - Went with Caffe as TensorFlow can't handle videos
    - Checked out Darknet (YOLO paper)
    - Created Amazon AWS AMI containing Caffe and Jupyter for future
- Create a small script using the model output to test videos

More Data Collection
---
- Extract images showing the full table using the model trained above
- Create a program to label the locations of the balls and playing surface
- Increase the number of labelled images by removing random balls
- Convert the metadata files to annotation XML for using in RCNN
- One of the corner x values was labelled wrong - fixed this by estimation
- Estimated bounding box for corner pockets

Comparison of Networks
---
- Looked at the following:
    - Classification
    - Detection
    - Segmentation
- Had to consider memory constraints
- Different options in blog post (plus Residual Network paper)
- Decided on Faster-RCNN due to speed and detection

More Network Training
---
- Altered the Faster RCNN network architecture to take snooker data
- Added extra scripts to allow for the data to be loaded
- Split into 40k train, 4k validation
- Used imagenet models to initialize weights - pockets weren't working otherwise
